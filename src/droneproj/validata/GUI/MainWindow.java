/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package droneproj.validata.GUI;
import droneproj.validata.interpreter.ScriptInterpreter;
import droneproj.validata.parsing.EnclosureList;
import droneproj.validata.plot.Plot2D;
import droneproj.validata.systemrerouter.*;
import droneproj.validata.utils.DataPackage;
import droneproj.validata.utils.ListInterface;
import droneproj.validata.utils.Parser;
import java.awt.BorderLayout;
import java.awt.Toolkit;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.io.UnsupportedEncodingException;
import java.util.ArrayList;
import java.util.Arrays;
import javax.swing.RowSorter;
import javax.swing.SortOrder;
import javax.swing.table.DefaultTableModel;
import org.fife.ui.autocomplete.*;
import org.fife.ui.rsyntaxtextarea.*;

/**
 *
 * @author Victor
 */
public class MainWindow extends javax.swing.JFrame {

    /**
     * Creates new form MainWindow
     */
    public MainWindow() {
        initComponents();
        setIcon();
        fileChooser = new javax.swing.JFileChooser();
        System.setOut(new PrintStream(new SystemOutRerouter(this.outputTextArea)));
      //  System.setErr(new PrintStream(new SystemErrRerouter(this.outputTextArea)));
        scriptInterpreter = ScriptInterpreter.getInstance();
        this.initSyntaxCodeComponents();
        this.initCodeTextArea();
        
        this.dataPackageList = new ArrayList<DataPackage>();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        plotSetupDialog = new javax.swing.JDialog();
        plotSetupDialog_TitleLabel = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        plotSetupDialog_FileList = new javax.swing.JList();
        plotSetupDialog_AddButton = new javax.swing.JButton();
        plotSetupDialog_RemoveButton = new javax.swing.JButton();
        plotSetupDialog_NextButton = new javax.swing.JButton();
        plotSetupDialog_CancelButton = new javax.swing.JButton();
        plotSetupAddDataSourceDialog = new javax.swing.JDialog();
        addDataSource_filePathLabel = new javax.swing.JLabel();
        addDataSource_filepathTextField = new javax.swing.JTextField();
        addDataSource_browseButton = new javax.swing.JButton();
        addDataSource_okButton = new javax.swing.JButton();
        addDataSource_parserComboBox = new javax.swing.JComboBox();
        addDataSource_parserLabel = new javax.swing.JLabel();
        addDataSource_cancelButton = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        plotSetupAssignDialog = new javax.swing.JDialog();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        plotSetupAssignTable = new javax.swing.JTable();
        plotSetupAssignDialog_PlotButton = new javax.swing.JButton();
        plotSetupAssignDialog_CancelButton = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        runButton = new javax.swing.JButton();
        stopButton = new javax.swing.JButton();
        plotButton = new javax.swing.JButton();
        plotTabbedPane = new javax.swing.JTabbedPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        outputTextArea = new javax.swing.JTextArea();
        codePanel = new javax.swing.JPanel(new BorderLayout());
        jMenuBar1 = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        openScriptMenuItem = new javax.swing.JMenuItem();
        saveScriptMenuItem = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();

        plotSetupDialog.setMinimumSize(new java.awt.Dimension(430, 300));
        plotSetupDialog.setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("circle_green.png")));

        plotSetupDialog_TitleLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        plotSetupDialog_TitleLabel.setText("Setup plots");

        plotSetupDialog_FileList.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jScrollPane2.setViewportView(plotSetupDialog_FileList);

        plotSetupDialog_AddButton.setText("Add...");
        plotSetupDialog_AddButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                plotSetupDialog_AddButtonActionPerformed(evt);
            }
        });

        plotSetupDialog_RemoveButton.setText("Remove");
        plotSetupDialog_RemoveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                plotSetupDialog_RemoveButtonActionPerformed(evt);
            }
        });

        plotSetupDialog_NextButton.setText("Next");
        plotSetupDialog_NextButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                plotSetupDialog_NextButtonActionPerformed(evt);
            }
        });

        plotSetupDialog_CancelButton.setText("Cancel");
        plotSetupDialog_CancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                plotSetupDialog_CancelButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout plotSetupDialogLayout = new javax.swing.GroupLayout(plotSetupDialog.getContentPane());
        plotSetupDialog.getContentPane().setLayout(plotSetupDialogLayout);
        plotSetupDialogLayout.setHorizontalGroup(
            plotSetupDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(plotSetupDialogLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(plotSetupDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(plotSetupDialog_TitleLabel)
                    .addGroup(plotSetupDialogLayout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 245, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(plotSetupDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(plotSetupDialog_CancelButton)
                            .addComponent(plotSetupDialog_NextButton, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(plotSetupDialog_RemoveButton)
                            .addComponent(plotSetupDialog_AddButton, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        plotSetupDialogLayout.setVerticalGroup(
            plotSetupDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(plotSetupDialogLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(plotSetupDialog_TitleLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(plotSetupDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(plotSetupDialogLayout.createSequentialGroup()
                        .addComponent(plotSetupDialog_AddButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(plotSetupDialog_RemoveButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(plotSetupDialog_NextButton)
                        .addGap(7, 7, 7)
                        .addComponent(plotSetupDialog_CancelButton))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 180, Short.MAX_VALUE))
                .addContainerGap())
        );

        plotSetupAddDataSourceDialog.setMinimumSize(new java.awt.Dimension(334, 200));
        plotSetupAddDataSourceDialog.setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("circle_green.png")));

        addDataSource_filePathLabel.setText("Select file:");

        addDataSource_browseButton.setText("Browse...");
        addDataSource_browseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addDataSource_browseButtonActionPerformed(evt);
            }
        });

        addDataSource_okButton.setText("OK");
        addDataSource_okButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addDataSource_okButtonActionPerformed(evt);
            }
        });

        addDataSource_parserComboBox.setModel(new javax.swing.DefaultComboBoxModel(Parser.values()));

        addDataSource_parserLabel.setText("Parser");

        addDataSource_cancelButton.setText("Cancel");
        addDataSource_cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addDataSource_cancelButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout plotSetupAddDataSourceDialogLayout = new javax.swing.GroupLayout(plotSetupAddDataSourceDialog.getContentPane());
        plotSetupAddDataSourceDialog.getContentPane().setLayout(plotSetupAddDataSourceDialogLayout);
        plotSetupAddDataSourceDialogLayout.setHorizontalGroup(
            plotSetupAddDataSourceDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(plotSetupAddDataSourceDialogLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(plotSetupAddDataSourceDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(addDataSource_filePathLabel)
                    .addGroup(plotSetupAddDataSourceDialogLayout.createSequentialGroup()
                        .addComponent(addDataSource_filepathTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(addDataSource_browseButton))
                    .addComponent(addDataSource_parserLabel)
                    .addGroup(plotSetupAddDataSourceDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, plotSetupAddDataSourceDialogLayout.createSequentialGroup()
                            .addComponent(addDataSource_okButton)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(addDataSource_cancelButton))
                        .addComponent(addDataSource_parserComboBox, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(67, Short.MAX_VALUE))
        );
        plotSetupAddDataSourceDialogLayout.setVerticalGroup(
            plotSetupAddDataSourceDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(plotSetupAddDataSourceDialogLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(addDataSource_filePathLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(plotSetupAddDataSourceDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addDataSource_filepathTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(addDataSource_browseButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(addDataSource_parserLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(addDataSource_parserComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(plotSetupAddDataSourceDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addDataSource_okButton)
                    .addComponent(addDataSource_cancelButton))
                .addContainerGap(46, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        plotSetupAssignDialog.setMinimumSize(new java.awt.Dimension(450, 350));
        plotSetupAssignDialog.setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("circle_green.png")));

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel1.setText("Assign plot-ID to datasets:");

        plotSetupAssignTable.setAutoCreateRowSorter(true);
        plotSetupAssignTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                { new Integer(0), null},
                { new Integer(1), null},
                { new Integer(2), null},
                { new Integer(3), null}
            },
            new String [] {
                "Plot ID", "Dataset"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Object.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane3.setViewportView(plotSetupAssignTable);

        plotSetupAssignDialog_PlotButton.setText("Plot!");
        plotSetupAssignDialog_PlotButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                plotSetupAssignDialog_PlotButtonActionPerformed(evt);
            }
        });

        plotSetupAssignDialog_CancelButton.setText("Cancel");
        plotSetupAssignDialog_CancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                plotSetupAssignDialog_CancelButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout plotSetupAssignDialogLayout = new javax.swing.GroupLayout(plotSetupAssignDialog.getContentPane());
        plotSetupAssignDialog.getContentPane().setLayout(plotSetupAssignDialogLayout);
        plotSetupAssignDialogLayout.setHorizontalGroup(
            plotSetupAssignDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(plotSetupAssignDialogLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(plotSetupAssignDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 377, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(13, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, plotSetupAssignDialogLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(plotSetupAssignDialog_PlotButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(plotSetupAssignDialog_CancelButton)
                .addContainerGap())
        );
        plotSetupAssignDialogLayout.setVerticalGroup(
            plotSetupAssignDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(plotSetupAssignDialogLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 212, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(plotSetupAssignDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(plotSetupAssignDialog_PlotButton)
                    .addComponent(plotSetupAssignDialog_CancelButton))
                .addContainerGap(25, Short.MAX_VALUE))
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Validation platform");
        setIconImage(getIconImage());
        setIconImages(null);

        runButton.setText("RUN");
        runButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                runButtonActionPerformed(evt);
            }
        });

        stopButton.setText("STOP");
        stopButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stopButtonActionPerformed(evt);
            }
        });

        plotButton.setText("Plot...");
        plotButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                plotButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(runButton, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(stopButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 24, Short.MAX_VALUE)
                .addComponent(plotButton, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(runButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(stopButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(plotButton))
        );

        plotTabbedPane.setName("plotTabPanel"); // NOI18N

        outputTextArea.setEditable(false);
        outputTextArea.setColumns(20);
        outputTextArea.setLineWrap(true);
        outputTextArea.setRows(5);
        outputTextArea.setName("outputTextArea"); // NOI18N
        jScrollPane1.setViewportView(outputTextArea);

        plotTabbedPane.addTab("Console", jScrollPane1);

        codePanel.setLayout(new java.awt.GridLayout(1, 0));

        fileMenu.setText("File");

        openScriptMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        openScriptMenuItem.setText("Open script...");
        openScriptMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openScriptMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(openScriptMenuItem);

        saveScriptMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        saveScriptMenuItem.setText("Save script...");
        saveScriptMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveScriptMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(saveScriptMenuItem);

        jMenuBar1.add(fileMenu);

        jMenu2.setText("Edit");
        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(codePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(plotTabbedPane, javax.swing.GroupLayout.DEFAULT_SIZE, 455, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(plotTabbedPane, javax.swing.GroupLayout.DEFAULT_SIZE, 450, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(codePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void runButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_runButtonActionPerformed
        // TODO add your handling code here:
        this.outputTextArea.setText("");
        scriptInterpreter.runScript(this.codeTextArea.getText());
    }//GEN-LAST:event_runButtonActionPerformed

    private void openScriptMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openScriptMenuItemActionPerformed
        //<editor-fold defaultstate="collapsed" desc=" Open script procedure... ">
        int retVal = fileChooser.showOpenDialog(this);
        if (retVal == javax.swing.JFileChooser.APPROVE_OPTION)
        {
            File file = fileChooser.getSelectedFile();
            BufferedReader reader = null;
            try
            {
                reader = new BufferedReader(new FileReader(file));
                String line = null;
                StringBuilder  stringBuilder = new StringBuilder();
                String ls = System.getProperty("line.separator");

                while( ( line = reader.readLine() ) != null ) {
                    stringBuilder.append( line );
                    stringBuilder.append( ls );
                }
                this.codeTextArea.setText(stringBuilder.toString());
            }
            catch (Exception e)
            {
                System.err.println(e.toString());
            }
        }
        //</editor-fold>
    }//GEN-LAST:event_openScriptMenuItemActionPerformed

    private void saveScriptMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveScriptMenuItemActionPerformed
        //<editor-fold defaultstate="collapsed" desc=" Save script procedure... ">
        int retVal = fileChooser.showSaveDialog(this);
        if (retVal == javax.swing.JFileChooser.APPROVE_OPTION)
        {
            File file = fileChooser.getSelectedFile();
            try {
                PrintWriter writer = new PrintWriter(file.getAbsoluteFile(), "UTF-8");
                writer.println(codeTextArea.getText());
                writer.close();
            } catch (FileNotFoundException ex) {
                System.err.println(ex.toString());
            } catch (UnsupportedEncodingException ex) {
                System.err.println(ex.toString());
            }          
        }
        //</editor-fold>
    }//GEN-LAST:event_saveScriptMenuItemActionPerformed

    private void stopButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stopButtonActionPerformed
        // Safety logic goes here...
    }//GEN-LAST:event_stopButtonActionPerformed

    private void plotButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_plotButtonActionPerformed
        this.plotSetupDialog.setVisible(true);
    }//GEN-LAST:event_plotButtonActionPerformed

//<editor-fold defaultstate="collapsed" desc="PlotSetupDialog actionListeners">
    private void plotSetupDialog_RemoveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_plotSetupDialog_RemoveButtonActionPerformed
        //<editor-fold defaultstate="collapsed" desc="PlotSetupDialog: Remove data source from list">
        if(this.plotSetupDialog_FileList.getSelectedIndex()>=0)
            this.dataPackageList.remove(this.plotSetupDialog_FileList.getSelectedIndex());
        plotSetupDialog_updateList();
        //</editor-fold>
    }//GEN-LAST:event_plotSetupDialog_RemoveButtonActionPerformed

    private void plotSetupDialog_AddButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_plotSetupDialog_AddButtonActionPerformed
        //<editor-fold defaultstate="collapsed" desc="PlotSetupDialog: Add button press ">
        this.plotSetupAddDataSourceDialog.setVisible(true);
        //</editor-fold>
    }//GEN-LAST:event_plotSetupDialog_AddButtonActionPerformed

    private void plotSetupDialog_CancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_plotSetupDialog_CancelButtonActionPerformed
        //<editor-fold defaultstate="collapsed" desc="PlotSetupDialog: Cancel button press">
        
        //</editor-fold>
    }//GEN-LAST:event_plotSetupDialog_CancelButtonActionPerformed

    private void addDataSource_browseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addDataSource_browseButtonActionPerformed
        //<editor-fold defaultstate="collapsed" desc="FileBrowser code">

        int retVal = fileChooser.showOpenDialog(this);
        if (retVal == javax.swing.JFileChooser.APPROVE_OPTION)
        {
            addDataSource_filepathTextField.setText(fileChooser.getSelectedFile().getPath());
        }
        //</editor-fold>
    }//GEN-LAST:event_addDataSource_browseButtonActionPerformed

    private void addDataSource_okButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addDataSource_okButtonActionPerformed
        //<editor-fold defaultstate="collapsed" desc="Ok kod">
        dataPackageList.add(new DataPackage(addDataSource_filepathTextField.getText(), (Parser)addDataSource_parserComboBox.getSelectedItem()));
        this.plotSetupAddDataSourceDialog.setVisible(false);
        plotSetupDialog_updateList();
        //</editor-fold>
    }//GEN-LAST:event_addDataSource_okButtonActionPerformed

    private void addDataSource_cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addDataSource_cancelButtonActionPerformed
        this.plotSetupAddDataSourceDialog.setVisible(false);
    }//GEN-LAST:event_addDataSource_cancelButtonActionPerformed

    private void plotSetupDialog_NextButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_plotSetupDialog_NextButtonActionPerformed
        //<editor-fold defaultstate="collapsed" desc="PlotSetupDialog: Next button press">
        this.plotSetupDialog.setVisible(false);
        this.updatePlotAssignTable();
        this.plotSetupAssignDialog.setVisible(true);
        //</editor-fold>
    }//GEN-LAST:event_plotSetupDialog_NextButtonActionPerformed

    private void plotSetupAssignDialog_PlotButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_plotSetupAssignDialog_PlotButtonActionPerformed
        this.plotSetupAssignDialog.setVisible(false);
        plot();
    }//GEN-LAST:event_plotSetupAssignDialog_PlotButtonActionPerformed

    private void plotSetupAssignDialog_CancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_plotSetupAssignDialog_CancelButtonActionPerformed
        RowSorter sorter = this.plotSetupAssignTable.getRowSorter();
        sorter.setSortKeys(Arrays.asList(new RowSorter.SortKey(0, SortOrder.ASCENDING)));
        this.plotSetupAssignTable.setRowSorter(sorter);
    }//GEN-LAST:event_plotSetupAssignDialog_CancelButtonActionPerformed
//</editor-fold>
    
    private void plotSetupDialog_updateList()
    {
        String[] tempList = new String[this.dataPackageList.size()];
        int i = 0;
        for (DataPackage dp : this.dataPackageList)
        {
            tempList[i++] = dp.getName();
        }
        this.plotSetupDialog_FileList.setListData(tempList);
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainWindow().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addDataSource_browseButton;
    private javax.swing.JButton addDataSource_cancelButton;
    private javax.swing.JLabel addDataSource_filePathLabel;
    private javax.swing.JTextField addDataSource_filepathTextField;
    private javax.swing.JButton addDataSource_okButton;
    private javax.swing.JComboBox addDataSource_parserComboBox;
    private javax.swing.JLabel addDataSource_parserLabel;
    private javax.swing.JPanel codePanel;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JMenuItem openScriptMenuItem;
    private javax.swing.JTextArea outputTextArea;
    private javax.swing.JButton plotButton;
    private javax.swing.JDialog plotSetupAddDataSourceDialog;
    private javax.swing.JDialog plotSetupAssignDialog;
    private javax.swing.JButton plotSetupAssignDialog_CancelButton;
    private javax.swing.JButton plotSetupAssignDialog_PlotButton;
    private javax.swing.JTable plotSetupAssignTable;
    private javax.swing.JDialog plotSetupDialog;
    private javax.swing.JButton plotSetupDialog_AddButton;
    private javax.swing.JButton plotSetupDialog_CancelButton;
    private javax.swing.JList plotSetupDialog_FileList;
    private javax.swing.JButton plotSetupDialog_NextButton;
    private javax.swing.JButton plotSetupDialog_RemoveButton;
    private javax.swing.JLabel plotSetupDialog_TitleLabel;
    private javax.swing.JTabbedPane plotTabbedPane;
    private javax.swing.JButton runButton;
    private javax.swing.JMenuItem saveScriptMenuItem;
    private javax.swing.JButton stopButton;
    // End of variables declaration//GEN-END:variables
    private ScriptInterpreter scriptInterpreter;
    private org.fife.ui.rsyntaxtextarea.RSyntaxTextArea codeTextArea;
    private org.fife.ui.rtextarea.RTextScrollPane codeTextScrollPane;
    private ArrayList<DataPackage> dataPackageList;
    
    private final javax.swing.JFileChooser fileChooser;
    /**
     * Initializing the code editor with a pre-defined template
     */
    
    private void initSyntaxCodeComponents()
    {
        //<editor-fold defaultstate="collapsed" desc=" SyntaxCodeComponent initialization ">

        this.codeTextArea = new org.fife.ui.rsyntaxtextarea.RSyntaxTextArea(20,60);
        this.codeTextArea.setSyntaxEditingStyle(SyntaxConstants.SYNTAX_STYLE_JAVASCRIPT);
        this.codeTextArea.setCodeFoldingEnabled(true);
        this.codeTextArea.setAntiAliasingEnabled(true);
        
        CompletionProvider provider = createCompletionProvider();
        
        AutoCompletion ac = new AutoCompletion(provider);
        ac.install(codeTextArea);
        
        this.codeTextScrollPane = new org.fife.ui.rtextarea.RTextScrollPane(codeTextArea);
        this.codeTextScrollPane.setSize(codePanel.getWidth(), codePanel.getHeight());
        this.codeTextScrollPane.setFoldIndicatorEnabled(true);
        
        this.codePanel.add(this.codeTextScrollPane);
        
        //</editor-fold>
    }
    
    private void initCodeTextArea()
    {
        //<editor-fold defaultstate="collapsed" desc=" CodeTexxtArea initialization ">
        codeTextArea.append("/*\n");
        codeTextArea.append(" * AR.Drone 2.0 Validation Tool\n");
        codeTextArea.append(" * The main logic goes here. Do not remove the main()\n");
        codeTextArea.append(" * function!\n"); 
        codeTextArea.append(" */\n");
        codeTextArea.append("function main()\n");
        codeTextArea.append("{\n");
        codeTextArea.append("\tprintln(\"Hello world!\")\n");
        codeTextArea.append("}");
        //</editor-fold>
    }
    
    private CompletionProvider createCompletionProvider() {
        //<editor-fold defaultstate="collapsed" desc="AutoCompletion">
      // A DefaultCompletionProvider is the simplest concrete implementation
      // of CompletionProvider. This provider has no understanding of
      // language semantics. It simply checks the text entered up to the
      // caret position for a match against known completions. This is all
      // that is needed in the majority of cases.
      DefaultCompletionProvider provider = new DefaultCompletionProvider();

      // Add completions for all Java keywords. A BasicCompletion is just
      // a straightforward word completion.

      provider.addCompletion(new BasicCompletion(provider, "land()",        ": Send landing command to AR.Drone"));
      provider.addCompletion(new BasicCompletion(provider, "takeOff()", ": Send take off command to AR.Drone"));

      provider.addCompletion(new BasicCompletion(provider, "abstract"));
      provider.addCompletion(new BasicCompletion(provider, "assert"));
      provider.addCompletion(new BasicCompletion(provider, "break"));
      provider.addCompletion(new BasicCompletion(provider, "case"));
      provider.addCompletion(new BasicCompletion(provider, "catch"));
      provider.addCompletion(new BasicCompletion(provider, "class"));
      provider.addCompletion(new BasicCompletion(provider, "const"));
      provider.addCompletion(new BasicCompletion(provider, "continue"));
      provider.addCompletion(new BasicCompletion(provider, "default"));
      provider.addCompletion(new BasicCompletion(provider, "do"));
      provider.addCompletion(new BasicCompletion(provider, "else"));
      provider.addCompletion(new BasicCompletion(provider, "enum"));
      provider.addCompletion(new BasicCompletion(provider, "extends"));
      provider.addCompletion(new BasicCompletion(provider, "final"));
      provider.addCompletion(new BasicCompletion(provider, "finally"));
      provider.addCompletion(new BasicCompletion(provider, "for"));
      provider.addCompletion(new BasicCompletion(provider, "goto"));
      provider.addCompletion(new BasicCompletion(provider, "if"));
      provider.addCompletion(new BasicCompletion(provider, "implements"));
      provider.addCompletion(new BasicCompletion(provider, "import"));
      provider.addCompletion(new BasicCompletion(provider, "instanceof"));
      provider.addCompletion(new BasicCompletion(provider, "interface"));
      provider.addCompletion(new BasicCompletion(provider, "native"));
      provider.addCompletion(new BasicCompletion(provider, "new"));
      provider.addCompletion(new BasicCompletion(provider, "package"));
      provider.addCompletion(new BasicCompletion(provider, "private"));
      provider.addCompletion(new BasicCompletion(provider, "protected"));
      provider.addCompletion(new BasicCompletion(provider, "public"));
      provider.addCompletion(new BasicCompletion(provider, "return"));
      provider.addCompletion(new BasicCompletion(provider, "static"));
      provider.addCompletion(new BasicCompletion(provider, "strictfp"));
      provider.addCompletion(new BasicCompletion(provider, "super"));
      provider.addCompletion(new BasicCompletion(provider, "switch"));
      provider.addCompletion(new BasicCompletion(provider, "synchronized"));
      provider.addCompletion(new BasicCompletion(provider, "this"));
      provider.addCompletion(new BasicCompletion(provider, "throw"));
      provider.addCompletion(new BasicCompletion(provider, "throws"));
      provider.addCompletion(new BasicCompletion(provider, "transient"));
      provider.addCompletion(new BasicCompletion(provider, "try"));
      provider.addCompletion(new BasicCompletion(provider, "void"));
      provider.addCompletion(new BasicCompletion(provider, "volatile"));
      provider.addCompletion(new BasicCompletion(provider, "while"));

      // Add a couple of "shorthand" completions. These completions don't
      // require the input text to be the same thing as the replacement text.
      provider.addCompletion(new ShorthandCompletion(provider, "sysout",
            "System.out.println(", "System.out.println("));
      provider.addCompletion(new ShorthandCompletion(provider, "syserr",
            "System.err.println(", "System.err.println("));

      return provider;
      //</editor-fold>
    }
    
    private void updatePlotAssignTable()
    {
        int totalDatasetCounter = 0;
        
        for (DataPackage dp : this.dataPackageList)
        {
            totalDatasetCounter += dp.getListPack().getSize();
        }
        
        Object[][] tableValues = new Object[totalDatasetCounter][2];
        int i = 0;
        int j = 0;
        for (DataPackage dp : this.dataPackageList)
        {
            String[] temp = dp.getListPack().getNames();
            j=0;
            for (String str : temp)
            {
                tableValues[i][0] = j;
                tableValues[i++][1] = dp.getListPack().getList(j++);
            }
        }
        

        
        plotSetupAssignTable.setModel(new javax.swing.table.DefaultTableModel(
            tableValues,
            new String [] {
                "Plot ID", "Dataset"
            }
            ) {
                Class[] types = new Class [] {
                    java.lang.Integer.class, java.lang.String.class
                };

                public Class getColumnClass(int columnIndex) {
                    return types [columnIndex];
                }
            });
    }
    
    private void plot()
    {
        for (int i=this.plotTabbedPane.getTabCount()-1;i>0;i--)
        {
            this.plotTabbedPane.remove(i);
        }
        
        DefaultTableModel dtm = (DefaultTableModel) this.plotSetupAssignTable.getModel();
        int max = Integer.MIN_VALUE;
        int current;
        for (int i=0;i<dtm.getRowCount();i++)
        {
            current = (int)dtm.getValueAt(i, 0);
            max = max > current ? max: current;
        }
        ArrayList<ListInterface>[] Listcontainer = new ArrayList[max+1];
        for(int i = 0;i<Listcontainer.length;i++)
        {
            Listcontainer[i] = new ArrayList<>();
        }
        int pos = 0;
        ListInterface temporaryList;
        for(int i=0;i<dtm.getRowCount();i++)
        {
            pos = (int)dtm.getValueAt(i, 0);
            temporaryList = (ListInterface)dtm.getValueAt(i, 1);
            Listcontainer[pos].add(temporaryList);
        }

        EnclosureList eL = null;
        ArrayList<ListInterface> singlepointList;

        for(int i = 0; i< Listcontainer.length;i++)
        {
            eL = null;
            singlepointList = new ArrayList<>();
            for(ListInterface lI: Listcontainer[i])
            {
                if(!lI.isSinglePointList())
                {
                    eL = (EnclosureList)lI;
                }
                else
                {
                    singlepointList.add(lI);
                }
            }
            if(eL != null && singlepointList.size() > 0)
            {
                ListInterface[] li = new ListInterface[singlepointList.size()];
                for (int p=0;p<li.length;p++)
                {
                    li[p] = singlepointList.get(p);
                }
                Plot2D plot = new Plot2D(eL.getName(), eL, li);
                this.plotTabbedPane.addTab(plot.getTitle(), plot.getPanel());
            }
            else if(singlepointList.size() > 0)
            {
                ListInterface[] li = new ListInterface[singlepointList.size()];
                for (int p=0;p<li.length;p++)
                {
                    li[p] = singlepointList.get(p);
                }
                Plot2D plot = new Plot2D(li[0].getName(), li);
                this.plotTabbedPane.addTab(plot.getTitle(), plot.getPanel());
            }
            else if(eL != null)
            {
                Plot2D plot = new Plot2D(eL.getName(), eL);
                this.plotTabbedPane.addTab(plot.getTitle(), plot.getPanel());
            }
        }
            
            /*
        for (int i=0;i<dtm.getRowCount();)
        {
            int x = ((int)dtm.getValueAt(i, 0));
            singlepointList = new ArrayList<ListInterface>();
            eL=null;
            
            while (i<dtm.getRowCount() && ((int)dtm.getValueAt(i,0))==x)
            {
                ListInterface list = (ListInterface)dtm.getValueAt(i,1);
                if (list.isSinglePointList())
                    singlepointList.add(list);
                else
                    eL = (EnclosureList) list;
                i++;
            }
            // List with enclosure!
            if (eL != null && singlepointList.size()>0)
            {
                ListInterface[] li = new ListInterface[singlepointList.size()];
                for (int p=0;p<li.length;p++)
                    li[p] = singlepointList.get(p);
                Plot2D plot = new Plot2D(eL.getName(), eL, li);
                this.plotTabbedPane.addTab(plot.getTitle(), plot.getPanel());
            }

        }*/
    }

    private void setIcon() {
        setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("circle_green.png")));
    }

}
